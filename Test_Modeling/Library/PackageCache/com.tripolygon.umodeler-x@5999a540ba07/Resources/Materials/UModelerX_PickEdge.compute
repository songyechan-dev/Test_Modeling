#pragma kernel CSMain

struct VertexData
{
    float3 vertex1;
	float3 vertex2;
};

bool IntersectEdge(float4x4 projtm, float3 pos1, float3 pos2)
{
	float4 v1 = mul(projtm, float4(pos1, 1));
	float4 v2 = mul(projtm, float4(pos2, 1));
	float2 p1 = v1.xy / v1.w;
	float2 p2 = v2.xy / v2.w;

	float2 v = p2 - p1;

	if (v.x >= 0)
	{
		if (p2.x <= 0 || p1.x >= 1)
		{
			return false;
		}

		if (p1.x < 0)
		{
			p1.y += (p2.y - p1.y) * ((0 - p1.x) / (p2.x - p1.x));
			p1.x = 0;
		}
        if (p2.x > 1)
        {
            p2.y += (p1.y - p2.y) * ((1 - p2.x) / (p1.x - p2.x));
            p2.x = 1;
        }
	}
	else if (v.x < 0)
	{
        if (p2.x >= 1 || p1.x <= 0)
		{
			return false;
		}

		if (p1.x > 1)
		{
			p1.y += (p2.y - p1.y) * ((1 - p1.x) / (p2.x - p1.x));
			p1.x = 1;
		}
        if (p2.x < 0)
        {
            p2.y += (p1.y - p2.y) * ((0 - p2.x) / (p1.x - p2.x));
            p2.x = 0;
        }
	}

	if (v.y >= 0)
	{
		if (p2.y <= 0 || p1.y >= 1)
		{
			return false;
		}
	}
	else if (v.y < 0)
	{
		if (p2.y >= 1 || p1.y <= 0)
		{
			return false;
		}
	}

	return true;
}

bool IntersectEdgeWithClip(float4 plane, float4x4 projtm, float3 pos1, float3 pos2)
{
	float d1 = dot(plane, float4(pos1, 1));
	float d2 = dot(plane, float4(pos2, 1));

    if (d1 * d2 < 0)
    {
        float3 mid = lerp(pos1, pos2, d1 / (d1 - d2));
        if (d1 > 0)
            pos2 = mid;
        else
            pos1 = mid;
		return IntersectEdge(projtm, pos1, pos2);
    }
    else if (d1 < 0)
        return false;
	else
		return IntersectEdge(projtm, pos1, pos2);
}

RWStructuredBuffer<VertexData> vertexBuffer;
AppendStructuredBuffer<uint> resultBuffer;
float4x4 projTM;
float4 plane;
int offset;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int index = offset + id.x;

	if (IntersectEdgeWithClip(plane, projTM, vertexBuffer[index].vertex1, vertexBuffer[index].vertex2))
	{
		resultBuffer.Append(index);
	}
}